
	.ORIG X3000 
	
	LD R7 MEM
	LD R6 MASK
	AND R0 R0 #0
	AND R1 R1 #0
	AND R2 R2 #0
	AND R3 R3 #0
	AND R4 R4 #0
	AND R5 R5 #0

; COUNTER THAT COUNTS HOW MANY STUDENTS
	
	NOT R6 R6 ; R6 NOW CONTAINS X00FF
	LDR R0 R7 #0 ; GET THE FIRST NUMBER IN R0
	AND R1 R0 R6 ; GET THE ID IN R1
	BRZ NONE ; FALL THROUGH IF THERE IS A STUDENT
	ADD R5 R5 #1 ; INCREASE THE COUNTER
	ADD R7 R7 #1 ; INCREASE MEMORY POINTER
	LDR R0 R7 #0 ; GET THE SECOND NUMBER
	AND R1 R0 R6 ; TO GET THE SECOND ID
	BRZ ONE ; FALL THROUGH IF THERE IS MORE THAN ONE STUDNET
	ADD R5 R5 #1 ; INCRESE THE COUNTER
	ADD R7 R7 #1 ; INCREASE MEMORY POINTER
START 	LDR R0 R7 #0 ; 
	AND R1 R0 R6 ;
	BRZ SORT ; GO TO SORT ONCE ALL THE STUDENTS ARE COUNTED
	ADD R5 R5 #1 ;
	ADD R7 R7 #1 ; 
	BR START ;

; WHAT HAPPENS IF THERE ARE NO STUDENTS

NONE 	LD R7 MEM ; LOAD R7 BACK WITH X4003
	ADD R3 R3 #-1 ; TO GET XFFFF
	STR R3 R7 #-3 ; STORE THE RANGE WITH FFFF
	STR R3 R7 #-1 ; STORE THE MEDIAN WITH FFFF
	STR R4 R7 #-2 ; STORE THE NUMBER OF STUDENTS WITH ZERO
	BR STOP ; JUMP TO HALT

; WHAT HAPPENS IF THERE IS ONLY ONE STUDENT

ONE  	LD R7 MEM ; LOAD R7 BACK WITH X4003
	LD R6 MASK ; 

; STORE ONE INTO THE COUNT
	ADD R3 R3 #1 ; 
	STR R3 R7 #-2 ; STORE THE NUMBER OF STUDENTS WITH ONE

; STORE THE RANGE
	LDR R0 R7 #0 ; 
	AND R0 R0 R6 ; GET THE SCORE INTO R0
	AND R1 R1 #0 ; CLEAR THE COUNT
	ADD R1 R1 #8 ; MAKE THE COUNT 8
	AND R2 R2 #0 ; CLEAR R2
	ADD R2 R0 #0 ; ADD THE SCORE INTO R2
BTSH	ADD R2 R2 #0 ; 
	BRZP WOW ; FALL THROUGH IF THERE IS A ONE IN LEADING BIT
	ADD R2 R2 R2 ; 
	ADD R2 R2 #1 ; 
	BR DEC ; SKIP THE NEXT LINE
WOW	ADD R2 R2 R2 ; 
DEC	ADD R1 R1 #-1 ; DECREMENT THE COUNTER
	BRNP BTSH ; FALL THROUGH ONCE THE COUNTER IS DONE
	ADD R0 R0 R2 ; ADD THE TWO NUMBERS TOGETHER
	STR R0 R7 #-3 ; STORE THAT RANGE INTO X4000

; STORE THE MEDIAN 
	STR R2 R7 #-1 ; STORE THE MEDIAN WITH THE ONE SCORE
	BR STOP ; FINISH PROGRAM 	

; SORTING ALGORITHM

SORT 	ST R5 COUNT ; STORE THE COUNT IN BLKW
	LD R6 MASK ; 
OUTER	ADD R5 R5 #-1 ; LOOP THROUGH COUNTER - 1 TIMES
	BRNZ SORTED ; 
	ADD R4 R5 #0 ; INNER COUNTER EQUALS OUTER COUNTER
	LD R7 MEM ; 
INNER 	LDR R0 R7 #0 ; 
	LDR R1 R7 #1 ; 
	AND R2 R0 R6 ; PUT THE GRADE INTO R2
	AND R3 R1 R6 ; PUT THE GRADE INTO R3
	NOT R6 R6 ; R6 NOW CONATINS X00FF
	AND R0 R0 R6 ; NOW R0 CONTAINS JUST THE ID
	AND R1 R1 R6 ; NOW R1 CONTIANS JUST THE SECOND ID
	NOT R6 R6 ; R6 IS NOW XFFOO
	NOT R2 R2 ; 
	ADD R2 R2 #1 ; 
	ADD R3 R3 R2 ; 2ND GRADE MINUS THE 1ST GRADE
	BRNZ SWAPPED ; IF POSITIVE FALL THROUGH, THEY NEED TO BE SWAPPED
	NOT R2 R2 ; 
	ADD R2 R2 #1 ; 
	ADD R3 R3 R2 ; GET THE SECOND GRADE BACK IN R3
	ADD R3 R3 R1 ; ADD THE ID BACK TO GRADE 2
	STR R3 R7 #0 ; 
	ADD R2 R2 R0 ; ADD THE ID BACK TO GRADE 1
	STR R2 R7 #1 ;
SWAPPED	ADD R7 R7 #1 ; INCREMENT THE FILE POINTER
	ADD R4 R4 #-1 ; DECREASE THE INNER COUNTER
	BRP INNER ; 
	BRNZP OUTER ; 

; NOW THAT IT IS SORTED, PUT THE COUNT IN

SORTED 	LD R7 MEM ; SET R7 BACK TO X4003
	LD R5 COUNT ; PUT THE COUNTER IN R5
	STR R5 R7 #-2 ; STORE THE COUNT IN X4001

; NOW THAT THE COUNT IS IN, PUT IN THE RANGE

	LD R6 MASK ; 
	LDR R0 R7 #0 ; GET THE HIGHEST SCORE IN R0 WITH THE ID
	AND R0 R0 R6 ; JUST THE SCORE NOW
	LD R1 MEM ; R1 NOW HAS x4003
	ADD R1 R1 R5 ; 
	ADD R1 R1 #-1 ; R1 NOW HAS THE LOCATION OF THE LAST NUMBER
	LDR R2 R1 #0 ; R2 NOW HAS THE LAST SCORE AND ID
	AND R2 R2 R6 ; NOW JUST THE SCORE
	AND R3 R3 #0 ; CLEAR THE COUNT
	ADD R3 R3 #8 ; MAKE THE COUNT 8
BTSHI	ADD R2 R2 #0 ; 
	BRZP WOWZ ; FALL THROUGH IF THERE IS A ONE IN LEADING BIT
	ADD R2 R2 R2 ; 
	ADD R2 R2 #1 ; 
	BR DECR ; SKIP THE NEXT LINE
WOWZ	ADD R2 R2 R2 ; 
DECR	ADD R3 R3 #-1 ; DECREMENT THE COUNTER
	BRNP BTSHI ; FALL THROUGH ONCE THE COUNTER IS DONE
	ADD R0 R0 R2 ; ADD THE TWO NUMBERS TOGETHER TO GET THE RANGE
	STR R0 R7 #-3 ; STORE THAT RANGE IN X4000

; NOW THAT THE RANGE IS IN, PUT IN THE MEDIAN
	
	LD R1 COUNT ;
	LD R3 YO ;  
	AND R2 R2 #0 ; CLEAR THE COUNT
	ADD R2 R2 #15 ; MAKE THE COUNT 15
BITSH	ADD R1 R1 #0 ; 
	BRZP DUH ; 
	ADD R1 R1 R1 ; 
	ADD R1 R1 #1 ; 
	BR LOL ; SKIP THE NEXT LINE
DUH 	ADD R1 R1 R1 ; 
LOL	ADD R2 R2 #-1 ;
	BRNP BITSH ; 
	AND R1 R1 R3 ; GET RID OF THE MOST SIGNIFICAMT BIT, NOW R1 IS COUNT DIVIDED BY 2

	LD R4 COUNT ; 
	AND R4 R4 #1 ; 
	BRZ POS ; SKIP IF IT IS A POSITVE NUMBER OF STUDENTS
	AND R5 R5 #0 ; 
	LD R5 MEM ; 
	ADD R5 R5 R1 ;
	LDR R3 R5 #0 ; R3 CONTAINS THE MEDIAN SCORE AND ID
	AND R3 R3 R6 ; NOW JUST THE SCORE, BUT IT NEEDS TO BE SHIFTED
	AND R2 R2 #0 ; CLEAR THE COUNT
	ADD R2 R2 #8 ; MAKE THE COUNT 8
BS	ADD R3 R3 #0 ; 
	BRZP HEY ; 
	ADD R3 R3 R3 ;
	ADD R3 R3 #1 ; 
	BR HA ; 
HEY	ADD R3 R3 R3 ; 
HA	ADD R2 R2 #-1 ; 
	BRNP BS ;
	STR R3 R7 #-1 ; 
	BR STOP ; 

POS	LD R5 MEM ;
	LD R7 YO ; 
	ADD R5 R5 R1 ; 
	LDR R3 R5 #0 ; 
	AND R3 R3 R6 ; JUST THE SCORE
	AND R2 R2 #0 ;
	ADD R2 R2 #8 ; 
UFF	ADD R3 R3 #0 ;
	BRZP FUN ;
	ADD R3 R3 R3 ;
	ADD R3 R3 #1 ;
	BR SUN ;
FUN	ADD R3 R3 R3 ;
SUN	ADD R2 R2 #-1 ; 
	BRNP UFF ;

	LDR R4 R5 #-1 ; 
	AND R4 R4 R6 ; JUST THE SCORE 
	ADD R2 R2 #0 ;
	ADD R2 R2 #8 ;
UFFR	ADD R4 R4 #0 ;
	BRZP FUNR ;
	ADD R4 R4 R4 ;
	ADD R4 R4 #1 ;
	BR SUNR ;
FUNR	ADD R4 R4 R4 ;
SUNR	ADD R2 R2 #-1 ; 
	BRNP UFFR ;

	LD R6 YO ;
	ADD R5 R3 R4 ; NOW CONTAINS THE MIDDLE TWO NUMBERS SO WE HAVE TO DIVIDE IT BY 2
	AND R2 R2 #0 ; CLEAR THE COUNT
	ADD R2 R2 #15 ; MAKE THE COUNT 15
UGH	ADD R5 R5 #0 ; 
	BRZP DUHG ; 
	ADD R5 R5 R5 ; 
	ADD R5 R5 #1 ; 
	BR LOLG ; SKIP THE NEXT LINE
DUHG 	ADD R5 R5 R5 ; 
LOLG	ADD R2 R2 #-1 ;
	BRNP UGH ; 
	AND R5 R5 R6 ; GET RID OF THE MOST SIGNIFICAMT BIT, NOW R1 IS COUNT DIVIDED BY 2
	LD R7 MEM ; 
	STR R5 R7 #-1 ; STORE THE MEDIAN
	BR STOP ; 
	  

STOP	HALT
MEM	.FILL X4003
MASK	.FILL XFF00
YO 	.FILL X7FFF
COUNT	.BLKW 1
	.END
	